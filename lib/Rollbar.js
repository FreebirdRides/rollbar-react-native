Object.defineProperty(exports,"__esModule",{value:true});exports.Item=exports.Configuration=exports.Client=undefined;var _reactNative=require('react-native');var _rollbar=require('rollbar/src/react-native/rollbar');var _rollbar2=_interopRequireDefault(_rollbar);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var NativeClient=_reactNative.NativeModules.RollbarReactNative;var Client=exports.Client=function Client(config){var _this=this;_classCallCheck(this,Client);this.captureUncaughtExceptions=function(){if(ErrorUtils){var previousHandler=ErrorUtils.getGlobalHandler();ErrorUtils.setGlobalHandler(function(error,isFatal){if(_this.config.captureUncaught&&_this.config.shouldSend()){_this.error(error,undefined,function(queued){if(previousHandler){previousHandler(error,isFatal);}});}else if(previousHandler){previousHandler(error,isFatal);}});}};this.captureUnhandledRejections=function(){var tracking=require('promise/setimmediate/rejection-tracking');var client=_this;tracking.enable({allRejections:true,onUnhandled:function onUnhandled(id,error){client.error(error);},onHandled:function onHandled(){}});};this.log=function(obj,extra,callback){if(!_this.config.shouldSend()){if(callback){callback(false);}return;}_this.rollbar.log(obj,extra,callback);};this.debug=function(obj,extra,callback){return _this.rollbar.debug(obj,extra,callback);};this.info=function(obj,extra,callback){return _this.rollbar.info(obj,extra,callback);};this.warning=function(obj,extra,callback){return _this.rollbar.warning(obj,extra,callback);};this.error=function(obj,extra,callback){return _this.rollbar.error(obj,extra,callback);};this.critical=function(obj,extra,callback){return _this.rollbar.critical(obj,extra,callback);};this.setUser=function(id,name,email){NativeClient.setUser({id:id,name:name,email:email});};this.clearUser=function(){NativeClient.clearUser();};if(config instanceof Configuration){this.config=config;}else{this.config=new Configuration(config);}console.log('before break: ',this.config.toJSON());this.rollbar=new _rollbar2.default(this.config.toJSON());if(NativeClient){NativeClient.start(this.config.toJSON());this.captureUncaughtExceptions();if(this.config.captureUnhandledRejections){this.captureUnhandledRejections();}}else{throw new Error('Rollbar: Native client not found. Did you run react-native link?');}};var Configuration=exports.Configuration=function Configuration(accessToken,options){var _this2=this;_classCallCheck(this,Configuration);this.shouldSend=function(){return!_this2.releaseStage||!_this2.enabledReleaseStages||_this2.enabledReleaseStages.includes(_this2.releaseStage);};this.toJSON=function(){return{accessToken:_this2.accessToken,payload:{codeBundleId:_this2.codeBundleId,releaseStage:_this2.releaseStage,enabledReleaseStages:_this2.enabledReleaseStages,appVersion:_this2.appVersion},notifier:{name:'rollbar-react-native',version:_this2.version}};};options=options||{};var pkgData=require('../package.json');this.version=pkgData['version'];this.accessToken=accessToken;this.logLevel=options.logLevel||'debug';this.endpoint=options.endpoint||'https://api.rollbar.com/api/1/';this.appVersion=options.appVersion||undefined;this.codeBundleId=options.codeBundleId||undefined;this.releaseStage=options.releaseStage||undefined;this.enabledReleaseStages=options.enabledReleaseStages||undefined;this.captureUncaught=options.captureUncaught!==undefined?options.captureUncaught:true;this.captureUnhandledRejections=options.captureUnhandledRejections!==undefined?options.captureUnhandledRejections:!__DEV__;};var Item=exports.Item=function Item(accessToken,obj,level,extra){var _this3=this;_classCallCheck(this,Item);this.addMetadata=function(section,key,value){if(!_this3.metadata[section]){_this3.metadata[section]={};}_this3.metadata[section][key]=value;};this.toJSON=function(){return{accessToken:_this3.accessToken,errorClass:_this3.errorClass,errorMessage:_this3.errorMessage,stack:_this3.stack,message:_this3.message,level:_this3.level,metadata:typedMap(_this3.metadata),user:_this3.user};};this.accessToken=accessToken;if(obj instanceof Error){this.errorClass=obj.constructor.name;this.errorMessage=obj.message;this.stack=obj.stack;}else{this.message=obj;}this.level=level;this.metadata=extra||{};this.user={};};var allowedMapObjectTypes=['string','number','boolean'];var typedMap=function typedMap(map){var output={};for(var key in map){if(!{}.hasOwnProperty.call(map,key)){continue;}var value=map[key];if(value==undefined||typeof value==='number'&&isNaN(value)){output[key]={type:'string',value:String(value)};}else if(typeof value==='object'){output[key]={type:'map',value:typedMap(value)};}else{var type=typeof value;if(allowedMapObjectTypes.includes(type)){output[key]={type:type,value:value};}else{console.warn('Could not serialize metadata for \''+key+'\': Invalid type \''+type+'\'');}}}return output;};

//# sourceMappingURL=Rollbar.js.map